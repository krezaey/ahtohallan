Ahtohallan {
    // -- Upper Level Definitions
    Program = (Declaration | Expression)*

    Declaration = Function | Class

    Expression = (ParenthesisExpression | PlainExpression) "‚ùÖ"

    // -- Function Specific Definitions
    Function =  functionWord type identifier "(" Parameters? ")" "{" Body? "}" 

    Body = (Expression | VariableInstance)* 

    // -- Class Specific Definitions

    Class = classWord identifier "{" (Constructor | Method | VariableInstance )* "}" 

    Constructor = constructorWord "(" Parameters? ")" "{" ClassBody "}"

    Method = methodWord type identifier "(" Parameters? ")" "{" ClassBody "}"

    ClassBody = (ClassExpression)*

    NewInstance = "Open~Door" identifier "(" Arguments? ")"

    // --Types and Mutability

    typeValue = int |  float | string | boolean | array | dictionary | noneType
    
    Array = "[" (ListOf<typeValue>)? "]"
    
    Dictionary = "[[" (ListOf<(string | identifier) ":" typeValue>)? "]]"
    
    // --Control Flow

    controlFlow = if | elseIf | else | while | switch | case | default | for

    // -- Operators

    Expression0 = (Expression0 +=)? Expression1

    Expression1 = NonemptyListOf<PlainExpression, logicalop>? Expression2

    Expression2 = (Expression2 relop)? Expression3
    
    Expression3 = NonemptyListOf<Expression3, addop>?  Expression4

    Expression4 = NonemptyListOf<Expression4, mulop>? SubExpression5

    Expression5 = (Expression5 exp)? Expression6

    Expression6 = Expression7
    
    // LogicalNegation = Expression?

    // IncrementDecrementOperator = Expression? incop

    // NegationOperator = negop Expression?

    // -- Generalized Definitions

    StringExpression = ...

    PlainExpression = StringExpression | Expression1
    
    ParenthesisExpression = "(" PlainExpression ")" | "-"? "(" Expression1 ")"

    identifier = ~reservedWord identifierStart identifierCharacter*

    Parameters = ListOf< type, identifier >

    VariableInstance = mutability type identifier "=" typeValue | NewInstance

    Arguments = ListOf<identifier>

    // -- Keywords

    reservedWord = type | mutability | constructorWord | classWord | functionWord | methodWord | controlFlow | print | this | new | break | return

    type = ("Anna" | "Elsa" | "Olaf" | "Love" | "Herd" | "Trolls[[]]" | "Samantha") ~remainingCharacter

    boolean = ("Kristoff" | "Hans") ~remainingCharacter

    mutability = ("Unmeltable" | "Meltable") ~remainingCharacter

    noneType = "Samantha" ~remainingCharacter
    
    constructorWord = "Water" ~remainingCharacter
 
    classWord = "Snow" ~remainingCharacter
 
    functionWord = "Ice" ~remainingCharacter
 
    methodWord = "Crystal" ~remainingCharacter
 
    if = "Get~This~Right" ~remainingCharacter
 
    else if = "The~Next~Right~Thing" ~remainingCharacter
 
    else = "Into~The~Unknown" ~remainingCharacter
 
    for = "Let~It~Go" ~remainingCharacter
 
    while = "Lost~In~The~Woods" ~remainingCharacter
 
    switch = "All~Is~Found" ~remainingCharacter
 
    case = "Show~Yourself" ~remainingCharacter
 
    default = "I~Seek~The~Truth" ~remainingCharacter
 
    print = "Sing" ~remainingCharacter
 
    this = "Frozen" ~remainingCharacter
 
    new = "Open~Door" ~remainingCharacter
 
    break = "Closed~Door" ~remainingCharacter
 
    return = "Arendelle" ~remainingCharacter

    // -- Character/Identifier Sub Definitions

    remainingCharacter = "_" | alnum
 
    identifierStart = ""
    
    identifierCharacter = ""

    int = digit+

    float = int* "." int+

    char = escape | ~"\\" ~"\"" ~"'" ~"\n" any

    string = "\"" (char | "\'")* "\""

    addop = "+" | "-"

    relop = "==" | "!=" | "<" | ">" | "<=" | ">=" 

    mulop = "*" | "/" | "%"

    incop = "++" | "--" 

    incAssignop = "+=" | "-="

    negop = "-"

    prefixop = ~negop "!"

    logicalop = "&&" || "||"

    exp = "**"

    comment = "~*" (~"\n" any)* "~*\n"
}