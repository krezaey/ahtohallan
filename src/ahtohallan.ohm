Ahtohallan {
    Program = Statement*
    Statement = Declaration
              | IfStatement | WhileLoop | ForLoop | SwitchStatement
              | Call
    Declaration = Function | Class | Variable
    Variable = mutability type identifier "=" Expression
    Expression = (ParenthesisExpression | PlainExpression) "❅"
    Function =  functionWord type identifier "(" Parameters? ")" Body
    Body = "{" Statement* "}"
    Class = classWord identifier "{" (Constructor | Method | Field )* "}"
    Constructor = constructorWord "(" Parameters? ")" Body
    Method = methodWord type identifier "(" Parameters? ")" Body
    Field = Variable
    IfStatement = if "(" Expression ")" Body
                  ( elseIf  "(" Expression "❅"")" Body )*
                  ( else Body )?
    WhileLoop = while "(" Expression ")" Body
    ForLoop = for "("Variable Relation "❅" Incrementer ")" Body
    SwitchStatement = switch "(" Expression ")" "{" (case "(" typeValue ")" ":" Statement* break "❅" )+ (default ":" Statement* break "❅")? "}"
    Incrementer = IncrementalOperator | IncrementalAssignment
    NewInstance = new identifier "(" Arguments? ")"
    ObjectTypeValue = Dictionary | Array | Call
    typeValue =   float | int| string | boolean | noneType | identifier
    Array = "[" ListOf<(typeValue | ObjectTypeValue), ",">? "]"
    Dictionary = "[[" (((string | identifier | int) ":" Expression)* )? "[["
    controlFlow = if | elseIf | else | while | switch | case | default | for
    Expression0= IncrementalOperator  | Expression1
    IncrementalOperator = identifier incop
    Expression1 = IncrementalAssignment | Expression2
    IncrementalAssignment = Expression1 incAssignop Expression2
    Expression2 = NonemptyListOf<Expression2, logicalop>? Expression3
    Expression3 = Relation | Expression4
    Relation = Expression3 relop Expression4
    Expression4 = (Expression4 addop)?  Expression5
    Expression5 = (Expression5 mulop)? Expression6
    Expression6 = (Expression6 exp)? Expression7
    Expression7 = NewInstance | ObjectTypeValue | Expression8
    Expression8 = negop? Expression9
    Expression9 = prefixop? typeValue
    Expression10 = GetProperty | Expression11
    GetProperty = (Call | identifier | this) "." identifier
    Expression11 = typeValue
    PlainExpression = Expression0
    ParenthesisExpression =  "(" PlainExpression ")"
    identifier = ~reservedWord identifierStart identifierCharacter*
    Parameters = ListOf< type, identifier >
    Arguments = ListOf<Expression0, ",">
    reservedWord = type | mutability | constructorWord | classWord | functionWord | methodWord | controlFlow | print | this | new | break | return
    type = ("Anna" | "Elsa" | "Olaf" | "Love" | "Herd[]" | "Trolls[[]]" | "Samantha")
    boolean = ("Kristoff" | "Hans") ~remainingCharacter
    mutability = ("Unmeltable" | "Meltable")
    noneType = "Samantha" ~remainingCharacter
    constructorWord = "Water" ~remainingCharacter
    classWord = "Snow" ~remainingCharacter
    functionWord = "Ice" ~remainingCharacter
    methodWord = "Crystal" ~remainingCharacter
    if = "Get~This~Right" ~remainingCharacter
    elseIf = "The~Next~Right~Thing" ~remainingCharacter
    else = "Into~The~Unknown" ~remainingCharacter
    for = "Let~It~Go" ~remainingCharacter
    while = "Lost~In~The~Woods" ~remainingCharacter
    switch = "All~Is~Found" ~remainingCharacter
    case = "Show~Yourself" ~remainingCharacter
    default = "I~Seek~The~Truth" ~remainingCharacter
    print = "Sing" ~remainingCharacter
    this = "Frozen" ~remainingCharacter
    new = "Open~Door" ~remainingCharacter
    break = "Closed~Door" ~remainingCharacter
    return = "Arendelle" ~remainingCharacter
    remainingCharacter = "_" | alnum
    identifierStart = letter | "_" | "@" |"~"
    identifierCharacter = alnum | "~"
    int = digit+
    float = int* "." int+
    char = escape | ~"\\" ~"\"" ~"'" ~"\n" any
    string = "\"" (char | "\'")* "\""
    addop = "+" | "-"
    relop = "==" | "!=" | "<" | ">" | "<=" | ">="
    mulop = "*" | "/" | "%"
    incop = "++" | "--"
    incAssignop = "+=" | "-="
    negop = "-"
    prefixop = ~negop "!"
    logicalop = "&&" | "||"
    exp = "**"
    comment =  "~*" (~"*~" any)* "*~"
    escape = "\\\\" | "\\\"" | "\\'" | "\\n" | "\\t"
    space := " " | "\t" | comment
    defaultFunction = print
    Call = (defaultFunction | identifier) "(" Arguments ")" "❅"
}