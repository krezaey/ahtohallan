Ahtohallan {
    Program = Statement*
    Statement = Declaration
              | IfStatement | WhileLoop | ForLoop | SwitchStatement
              | Call | ReturnStatement | Assignment | BreakStatement
    BreakStatement = break terminal
    ReturnStatement = return Expression  --long
                    | return terminal   --short
    Assignment = Increment| PlainAssignment
    PlainAssignment = (identifier| GetProperty) "=" Expression
    Increment = Incrementer | IncrementalAssignment
    IncrementalAssignment = (identifier | GetProperty) incAssignop Expression
    Incrementer = (identifier | GetProperty) incop terminal
    Declaration = Function | Class | Variable
    Variable = mutability (type | identifier) identifier ("=" Expression | "" terminal )
    Expression = (ParenthesisExpression | PlainExpression) terminal
    Function =  functionWord type identifier "(" (Parameters) ")" Body
    Body = "{" Statement* "}"
    Class = classWord identifier "{" (Constructor | Method | Field )* "}"
    Constructor = constructorWord "(" (Parameters) ")" Body
    Method = methodWord type identifier "(" (Parameters) ")" Body
    Field = Variable
    IfStatement = if "(" Expression ")" Body
                  ( elseIf  "(" Expression ")" Body )*
                  ( else Body )?
    WhileLoop = while "(" Expression ")" Body
    ForLoop = for "("Variable Relation terminal Increment ")" Body
    SwitchStatement = switch "(" Expression ")" "{" (case "(" typeValue ")" ":" Statement* )+ (default ":" Statement*)? "}"
    NewInstance = new identifier "(" Arguments? ")"
    ObjectTypeValue = Dictionary | Array | Call | NewInstance
    typeValue =   float | int | string | boolean | noneType | identifier
    Array = "[" ListOf<(typeValue | ObjectTypeValue), ","> "]"
    Dictionary = openDict DictionaryEntries? closeDict
    DictionaryEntry = (string | identifier | int) ":" Expression
    DictionaryEntries = ListOf<DictionaryEntry, ",">
    controlFlow = if | elseIf | else | while | switch | case | default | for
    Expression2 = Expression2 logicalop Expression3                    -- logicalop
                | Expression3
    Expression3 = Relation | Expression4
    Relation = Expression3 relop Expression4
    Expression4 = Expression4 addop Expression5                         -- addop
                | Expression5
    Expression5 = Expression5 mulop Expression6    -- mulop
                | Expression6
    Expression6 = Expression6 exp Expression7                             -- exp
                | Expression7
    Expression7 = NewInstance | ObjectTypeValue | Expression8
    Expression8 = negop Expression9                                         -- negop
                | Expression9
    Expression9 = prefixop Expression10                                      -- prefixop
                | Expression10
    Expression10 = GetProperty | typeValue | ObjectTypeValue
    GetProperty = (Call | identifier | this) (AccessDot | AccessBrackets)+
    AccessDot = "." (identifier | Call )
    AccessBrackets = AccessInt | AccessKeyValue
    AccessInt = "[" int "]"
    AccessKeyValue = openDict (identifier | string | int) closeDict
    PlainExpression = Expression2
    ParenthesisExpression =  "(" PlainExpression ")"
    identifier = ~reservedWord identifierStart identifierCharacter*
    Parameters = ListOf<Parameter, ",">
    Parameter = type identifier
    Arguments = ListOf<Argument, ",">
    Argument = Expression2
    reservedWord = type | mutability | constructorWord | classWord | functionWord | methodWord | controlFlow | print | this | new | break | return
    type = ("Anna" | "Elsa" | "Olaf" | "Love" | "Herd[]" | "Trolls[[]]" | "Samantha")
    boolean = ("Kristoff" | "Hans") ~remainingCharacter
    mutability = ("Unmeltable" | "Meltable")
    noneType = "Samantha" ~remainingCharacter
    constructorWord = "Water" ~remainingCharacter
    classWord = "Snow" ~remainingCharacter
    functionWord = "Ice" ~remainingCharacter
    methodWord = "Crystal" ~remainingCharacter
    if = "Get~This~Right" ~remainingCharacter
    elseIf = "The~Next~Right~Thing" ~remainingCharacter
    else = "Into~The~Unknown" ~remainingCharacter
    for = "Let~It~Go" ~remainingCharacter
    while = "Lost~In~The~Woods" ~remainingCharacter
    switch = "All~Is~Found" ~remainingCharacter
    case = "Show~Yourself" ~remainingCharacter
    default = "I~Seek~The~Truth" ~remainingCharacter
    print = "Sing" ~remainingCharacter
    this = "Frozen" ~remainingCharacter
    new = "Open~Door" ~remainingCharacter
    break = "Closed~Door" ~remainingCharacter
    return = "Arendelle" ~remainingCharacter
    remainingCharacter = "_" | alnum
    identifierStart = letter | "_" | "@" |"~"
    identifierCharacter = alnum | "~"
    int = digit+
    terminal = "‚ùÖ"
    float = int* "." int+
    char = escape | ~"\\" ~"\"" ~"'" ~"\n" any
    string = "\"" (char | "\'")* "\""
    addop = "+" | "-"
    relop = relop2 | "<" | ">"
    relop2 = ("=" "=") | (">" "=") | ("<" "=") | ("!" "=")
    mulop = "*" | "/" | "%"
    incop = "++" | "--"
    incAssignop = "+=" | "-="
    negop = "-"
    prefixop = ~negop "!"
    logicalop = "&&" | "||"
    exp = "**"
    comment =  "~*" (~"*~" any)* "*~"
    escape = "\\\\" | "\\\"" | "\\'" | "\\n" | "\\t"
    space += comment
    defaultFunction = print
    openDict = "[["
    closeDict = "]]"
    Call = (defaultFunction | identifier) "(" Arguments ")" terminal
}