
Ahtohallan { 
    Program = ( Expression | Declaration)*
    Declaration = Function | Class | Variable
    Variable = mutability type identifier "=" Expression 
    Expression = (ParenthesisExpression | PlainExpression) "‚ùÖ"
    Function =  functionWord type identifier "(" Parameters? ")" "{" Body? "}" 
    Body = (Expression)* 
    Class = classWord identifier "{" (Constructor | Method | "Field" )* "}" 
    Constructor = constructorWord "(" Parameters? ")" "{" ClassBody "}"
    Method = methodWord type identifier "(" Parameters? ")" "{" ClassBody "}"
    ClassBody = (ClassExpression)*
    ClassExpression = Expression
    NewInstance = "Open~Door" identifier "(" Arguments? ")"
    ObjectTypeValue = Array | Dictionary
    typeValue = int |  float | string | boolean | noneType
    Array = "[" ListOf<typeValue, ",">? "]"
    Dictionary = "[[" (((string | identifier) ":" typeValue)*)? "]]"
    controlFlow = if | elseIf | else | while | switch | case | default | for 
    Expression0= (identifier incop)? Expression1
    Expression1 = (Expression1 incAssignop)? Expression2
    Expression2 = NonemptyListOf<Expression2, logicalop>? Expression3
    Expression3 = (Expression3 relop)? Expression4
    Expression4 = (Expression4 addop)?  Expression5
    Expression5 = (Expression5 mulop)? Expression6
    Expression6 = (Expression6 exp)? Expression7
    Expression7 = NewInstance | Expression8
    Expression8 = negop? Expression9
    Expression9 = prefixop? typeValue
    PlainExpression = Expression0
    ParenthesisExpression =  PlainParenthesisExpression 
    PlainParenthesisExpression = "(" PlainExpression ")" 
    identifier = ~reservedWord identifierStart (identifierCharacter*)?
    Parameters = ListOf< type, identifier >
    Arguments = ListOf<identifier, ",">
    reservedWord = type | mutability | constructorWord | classWord | functionWord | methodWord | controlFlow | print | this | new | break | return
    type = ("Anna" | "Elsa" | "Olaf" | "Love" | "Herd" | "Trolls[[]]" | "Samantha")
    boolean = ("Kristoff" | "Hans") ~remainingCharacter
    mutability = ("Unmeltable" | "Meltable") 
    noneType = "Samantha" ~remainingCharacter
    constructorWord = "Water" ~remainingCharacter
    classWord = "Snow" ~remainingCharacter
    functionWord = "Ice" ~remainingCharacter
    methodWord = "Crystal" ~remainingCharacter
    if = "Get~This~Right" ~remainingCharacter
